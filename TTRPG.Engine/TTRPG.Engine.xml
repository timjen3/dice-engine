<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TTRPG.Engine</name>
    </assembly>
    <members>
        <member name="T:TTRPG.Engine.Condition">
            Condition on Sequence or SequenceItem
        </member>
        <member name="M:TTRPG.Engine.Condition.#ctor">
            constructor for condition
        </member>
        <member name="M:TTRPG.Engine.Condition.#ctor(System.String)">
            constructor for sequence-level condition
        </member>
        <member name="M:TTRPG.Engine.Condition.#ctor(System.String,System.String,System.String,System.Boolean,System.String)">
            constructor for condition for 1 item
        </member>
        <member name="M:TTRPG.Engine.Condition.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Boolean,System.String)">
            condition for 1+ items
        </member>
        <member name="P:TTRPG.Engine.Condition.DependentOnItem">
            Condition requires that this item was not skipped
        </member>
        <member name="P:TTRPG.Engine.Condition.Equation">
            Equation to evaluate; >= 1 is true otherwise false
        </member>
        <member name="P:TTRPG.Engine.Condition.ItemNames">
            Name of sequence item to bind to
        </member>
        <member name="P:TTRPG.Engine.Condition.ThrowOnFail">
            Whether exception should be thrown when Check fails
        </member>
        <member name="P:TTRPG.Engine.Condition.FailureMessage">
            Custom message for failure if ThrowOnFail is true
        </member>
        <member name="T:TTRPG.Engine.Equations.EquationResolver">
            Resolves an equation using mxParser
        </member>
        <member name="M:TTRPG.Engine.Equations.EquationResolver.#ctor(System.Collections.Generic.IEnumerable{org.mariuszgromada.math.mxparser.Function})">
            Constructor for Equation Resolver
        </member>
        <member name="M:TTRPG.Engine.Equations.EquationResolver.Process(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            adds inputs as arguments and resolves equation with mxParser
        </member>
        <member name="T:TTRPG.Engine.Equations.EquationService">
            contains logic for sequence components
        </member>
        <member name="M:TTRPG.Engine.Equations.EquationService.GetSourceMappingData(TTRPG.Engine.Mapping,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.IEnumerable{TTRPG.Engine.Role})">
            Returns source data depending on MappingType
        </member>
        <member name="M:TTRPG.Engine.Equations.EquationService.CheckRoleConditions(TTRPG.Engine.Sequences.Sequence,System.Collections.Generic.IEnumerable{TTRPG.Engine.Role})">
            Checks role conditions against provided roles
        </member>
        <member name="M:TTRPG.Engine.Equations.EquationService.#ctor(TTRPG.Engine.Equations.IEquationResolver)">
            EquationService Constructor
        </member>
        <member name="M:TTRPG.Engine.Equations.EquationService.Check(TTRPG.Engine.Condition,System.Collections.Generic.IDictionary{System.String,System.String})">
            Determine if the condition passes for the sequence
        </member>
        <member name="M:TTRPG.Engine.Equations.EquationService.Check(TTRPG.Engine.Condition,System.String,System.Collections.Generic.IDictionary{System.String,System.String},TTRPG.Engine.Sequences.SequenceResult)">
            Determine if the condition passes for a sequence item
        </member>
        <member name="M:TTRPG.Engine.Equations.EquationService.Apply(TTRPG.Engine.Mapping,System.String,System.Collections.Generic.Dictionary{System.String,System.String}@,System.Collections.Generic.IEnumerable{TTRPG.Engine.Role})">
            Injects the specified mapping into <param name="inputs"/> from the configured source determined by <see cref="T:TTRPG.Engine.MappingType"/>
            <param name="itemName">The sequence item name mapping is being applied for. If the mapping does not apply to that item nothing will happen.</param>
            <param name="roles">All roles available to the sequence.</param>
        </member>
        <member name="M:TTRPG.Engine.Equations.EquationService.GetResult(TTRPG.Engine.SequenceItems.SequenceItem,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String}@,System.Collections.Generic.IDictionary{System.String,System.String})">
            Process a sequence item and get the result
        </member>
        <member name="M:TTRPG.Engine.Equations.EquationService.ProcessResults(System.Collections.Generic.IEnumerable{TTRPG.Engine.SequenceItems.ResultItem},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{TTRPG.Engine.Role})">
            Process a sequence item and get the result
        </member>
        <member name="M:TTRPG.Engine.Equations.EquationService.Process(TTRPG.Engine.SequenceItems.SequenceItem,TTRPG.Engine.Role,System.Collections.Generic.IDictionary{System.String,System.String})">
            <see cref="M:TTRPG.Engine.Equations.IEquationService.Process(TTRPG.Engine.SequenceItems.SequenceItem,TTRPG.Engine.Role,System.Collections.Generic.IDictionary{System.String,System.String})"/>
        </member>
        <member name="M:TTRPG.Engine.Equations.EquationService.Check(TTRPG.Engine.Sequences.Sequence,TTRPG.Engine.Role,System.Collections.Generic.IDictionary{System.String,System.String})">
            <see cref="M:TTRPG.Engine.Equations.IEquationService.Check(TTRPG.Engine.Sequences.Sequence,TTRPG.Engine.Role,System.Collections.Generic.IDictionary{System.String,System.String})"/>
        </member>
        <member name="M:TTRPG.Engine.Equations.EquationService.Check(TTRPG.Engine.Sequences.Sequence,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{TTRPG.Engine.Role})">
            <see cref="M:TTRPG.Engine.Equations.IEquationService.Check(TTRPG.Engine.Sequences.Sequence,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{TTRPG.Engine.Role})"/>
        </member>
        <member name="M:TTRPG.Engine.Equations.EquationService.Process(TTRPG.Engine.Sequences.Sequence,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{TTRPG.Engine.Role})">
            <see cref="M:TTRPG.Engine.Equations.IEquationService.Process(TTRPG.Engine.Sequences.Sequence,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{TTRPG.Engine.Role})"/>
        </member>
        <member name="T:TTRPG.Engine.Equations.IEquationResolver">
            <summary>
            	Resolves equations
            </summary>
        </member>
        <member name="M:TTRPG.Engine.Equations.IEquationResolver.Process(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            	Resolves an mxParser expression
            </summary>
            <param name="equation"></param>
            <param name="inputs">Arguments to inject into the equation</param>
            <returns></returns>
        </member>
        <member name="T:TTRPG.Engine.Equations.IEquationService">
            <summary>
            	Processes Sequences.
            </summary>
        </member>
        <member name="M:TTRPG.Engine.Equations.IEquationService.Check(TTRPG.Engine.Sequences.Sequence,TTRPG.Engine.Role,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            	Check if a sequence can be resolved with the given arguments for the specified role.
            </summary>
            <remarks>
            	Sequence Conditions are used for validation.
            </remarks>
            <param name="sequence"></param>
            <param name="role"></param>
            <param name="inputs"></param>
            <returns></returns>
        </member>
        <member name="M:TTRPG.Engine.Equations.IEquationService.Check(TTRPG.Engine.Sequences.Sequence,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{TTRPG.Engine.Role})">
            <summary>
            	Check if a Sequence can be processed with the given arguments.
            </summary>
            <remarks>
            	Sequence Conditions are used for validation.
            </remarks>
            <param name="sequence"></param>
            <param name="inputs"></param>
            <param name="roles"></param>
            <returns></returns>
        </member>
        <member name="M:TTRPG.Engine.Equations.IEquationService.Process(TTRPG.Engine.SequenceItems.SequenceItem,TTRPG.Engine.Role,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            	Process a single sequence item and get the result
            </summary>
            <param name="item">item to be processed</param>
            <param name="role">(optional) inject role's attributes</param>
            <param name="inputs">(optional) inject</param>
            <returns></returns>
        </member>
        <member name="M:TTRPG.Engine.Equations.IEquationService.Process(TTRPG.Engine.Sequences.Sequence,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{TTRPG.Engine.Role})">
            <summary>
            	Process a Sequence and get a SequenceResult.
            </summary>
            <param name="sequence"></param>
            <param name="inputs"></param>
            <param name="roles"></param>
            <returns></returns>
        </member>
        <member name="T:TTRPG.Engine.IServiceCollectionExtensions">
            <summary>
            	Add TTRPG.Engine services to an IServiceCollection.
            </summary>
        </member>
        <member name="M:TTRPG.Engine.IServiceCollectionExtensions.AddTTRPGEngineServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            	Adds required services for ttrpg engine
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:TTRPG.Engine.IServiceCollectionExtensions.AddTTRPGEngineDataLayer(Microsoft.Extensions.DependencyInjection.IServiceCollection,TTRPG.Engine.Data.TTRPGEngineDataOptions)">
            <summary>
            	Adds data layer to services
            </summary>
            <param name="services"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:TTRPG.Engine.Mapping">
            <summary>
            	Renames input variables according to mappings before using them in conditions or sequence item equations.
            	The inputs are always copied to a new dictionary before changes are made to isolate changes to equations and reduce side effects.
            </summary>
        </member>
        <member name="M:TTRPG.Engine.Mapping.#ctor">
            Parameterless constructor
        </member>
        <member name="M:TTRPG.Engine.Mapping.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
            Constructor for a Role Mapping
        </member>
        <member name="M:TTRPG.Engine.Mapping.#ctor(System.String,System.String,System.String,System.Boolean)">
            Constructor for an Input Mapping
        </member>
        <member name="M:TTRPG.Engine.Mapping.#ctor(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            Constructor for an InventoryItem Mapping
        </member>
        <member name="P:TTRPG.Engine.Mapping.From">
            source property key
        </member>
        <member name="P:TTRPG.Engine.Mapping.To">
            destination property key
        </member>
        <member name="P:TTRPG.Engine.Mapping.ItemName">
            sequence item to apply mapping to
        </member>
        <member name="P:TTRPG.Engine.Mapping.RoleName">
            role to pull properties from
        </member>
        <member name="P:TTRPG.Engine.Mapping.InventoryItemName">
            inventory item to pull properties from
        </member>
        <member name="P:TTRPG.Engine.Mapping.MappingType">
            type of mapping
        </member>
        <member name="P:TTRPG.Engine.Mapping.ThrowOnFailure">
            whether to throw exception when From key is missing from inputs. If false, value will be set to 0
        </member>
        <member name="T:TTRPG.Engine.MappingType">
            specifies type of mapping
        </member>
        <member name="F:TTRPG.Engine.MappingType.Input">
            item is mapped from the input collection
        </member>
        <member name="F:TTRPG.Engine.MappingType.Role">
            item is mapped from a role
        </member>
        <member name="F:TTRPG.Engine.MappingType.InventoryItem">
            item is mapped from an inventory item
        </member>
        <member name="T:TTRPG.Engine.Role">
            a role carries a set of attributes into equations
        </member>
        <member name="M:TTRPG.Engine.Role.#ctor">
            role parameterless constructor
        </member>
        <member name="M:TTRPG.Engine.Role.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,TTRPG.Engine.Role})">
            role constructor
        </member>
        <member name="P:TTRPG.Engine.Role.Name">
            role's name
        </member>
        <member name="P:TTRPG.Engine.Role.Attributes">
            role's attributes
        </member>
        <member name="P:TTRPG.Engine.Role.Categories">
            categories that role belongs to
        </member>
        <member name="P:TTRPG.Engine.Role.InventoryItems">
            inventory items
        </member>
        <member name="P:TTRPG.Engine.Role.Alias">
            on originals matches Name, on clones it differs
        </member>
        <member name="M:TTRPG.Engine.Role.CloneAs(System.String)">
            creates a clone with a different name
        </member>
        <member name="T:TTRPG.Engine.SequenceItems.ResultItem">
            Configures a result
        </member>
        <member name="T:TTRPG.Engine.SequenceItems.SequenceItem">
            <summary>
            	The result is loaded into inputs to be made available to following equations
            </summary>
        </member>
        <member name="T:TTRPG.Engine.SequenceItems.SequenceItemEquationType">
            <summary>
            	Identifies the equation type of the sequence item
            </summary>
        </member>
        <member name="F:TTRPG.Engine.SequenceItems.SequenceItemEquationType.Algorithm">
            <summary>
            	Equation will be processed as an algorithm
            </summary>
        </member>
        <member name="F:TTRPG.Engine.SequenceItems.SequenceItemEquationType.Message">
            <summary>
            	Equation will be processed as a message
            </summary>
        </member>
        <member name="T:TTRPG.Engine.SequenceItems.SequenceItemResult">
            <summary>
            	Result for one resolved SequenceItem
            </summary>
        </member>
        <member name="P:TTRPG.Engine.SequenceItems.SequenceItemResult.Order">
            <summary>
            	The order of the processed sequence item in sequence, considered as if all items were processed
            </summary>
        </member>
        <member name="P:TTRPG.Engine.SequenceItems.SequenceItemResult.Inputs">
            <summary>
            	Snapshot of inputs used by this item (may vary from later items)
            </summary>
        </member>
        <member name="P:TTRPG.Engine.SequenceItems.SequenceItemResult.ResolvedItem">
            <summary>
            	The item that was rolled
            </summary>
        </member>
        <member name="P:TTRPG.Engine.SequenceItems.SequenceItemResult.Result">
            <summary>
            	What item resolved to
            </summary>
        </member>
    </members>
</doc>
