<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TTRPG.Engine</name>
    </assembly>
    <members>
        <member name="M:TTRPG.Engine.Conditions.Condition.#ctor(System.String)">
            sequence-level condition
        </member>
        <member name="M:TTRPG.Engine.Conditions.Condition.#ctor(System.String,System.String,System.String,System.Boolean,System.String)">
            condition for 1 item
        </member>
        <member name="M:TTRPG.Engine.Conditions.Condition.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Boolean,System.String)">
            condition for 1+ items
        </member>
        <member name="P:TTRPG.Engine.Conditions.Condition.DependentOnItem">
            Condition requires that this item was not skipped
        </member>
        <member name="P:TTRPG.Engine.Conditions.Condition.Equation">
            Equation to evaluate; >= 1 is true otherwise false
        </member>
        <member name="P:TTRPG.Engine.Conditions.Condition.ItemNames">
            Name of sequence item to bind to
        </member>
        <member name="P:TTRPG.Engine.Conditions.Condition.ThrowOnFail">
            Whether exception should be thrown when Check fails
        </member>
        <member name="P:TTRPG.Engine.Conditions.Condition.FailureMessage">
            Custom message for failure if ThrowOnFail is true
        </member>
        <member name="M:TTRPG.Engine.Conditions.Condition.Check(TTRPG.Engine.Equations.IEquationResolver,System.Collections.Generic.IDictionary{System.String,System.String})">
            Determine if the condition passes for the sequence
        </member>
        <member name="M:TTRPG.Engine.Conditions.Condition.Check(System.String,TTRPG.Engine.Equations.IEquationResolver,System.Collections.Generic.IDictionary{System.String,System.String},TTRPG.Engine.Sequences.SequenceResult)">
            Determine if the condition passes for a sequence item
        </member>
        <member name="T:TTRPG.Engine.Conditions.ICondition">
            a condition that is either for a sequence or a sequence item
        </member>
        <member name="M:TTRPG.Engine.Conditions.ICondition.Check(TTRPG.Engine.Equations.IEquationResolver,System.Collections.Generic.IDictionary{System.String,System.String})">
            Determine if the condition passes for the sequence
        </member>
        <member name="M:TTRPG.Engine.Conditions.ICondition.Check(System.String,TTRPG.Engine.Equations.IEquationResolver,System.Collections.Generic.IDictionary{System.String,System.String},TTRPG.Engine.Sequences.SequenceResult)">
            Determine if the condition passes for a sequence item
        </member>
        <member name="M:TTRPG.Engine.IServiceCollectionExtensions.AddTTRPGEngineServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            	Adds required services for ttrpg engine
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:TTRPG.Engine.Mappings.Mapping">
            <summary>
            	Renames input variables according to mappings before using them in conditions or sequence item equations.
            	The inputs are always copied to a new dictionary before changes are made to isolate changes to equations and reduce side effects.
            </summary>
        </member>
        <member name="M:TTRPG.Engine.Mappings.Mapping.GetSourceData(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.IEnumerable{TTRPG.Engine.Role})">
            Returns source data depending on MappingType
        </member>
        <member name="M:TTRPG.Engine.Mappings.Mapping.#ctor">
            Parameterless constructor
        </member>
        <member name="M:TTRPG.Engine.Mappings.Mapping.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
            Constructor for a Role Mapping
        </member>
        <member name="M:TTRPG.Engine.Mappings.Mapping.#ctor(System.String,System.String,System.String,System.Boolean)">
            Constructor for an Input Mapping
        </member>
        <member name="P:TTRPG.Engine.Mappings.Mapping.From">
            source property key
        </member>
        <member name="P:TTRPG.Engine.Mappings.Mapping.To">
            destination property key
        </member>
        <member name="P:TTRPG.Engine.Mappings.Mapping.ItemName">
            sequence item to apply mapping to
        </member>
        <member name="P:TTRPG.Engine.Mappings.Mapping.RoleName">
            role to pull properties from
        </member>
        <member name="P:TTRPG.Engine.Mappings.Mapping.MappingType">
            type of mapping
        </member>
        <member name="P:TTRPG.Engine.Mappings.Mapping.ThrowOnFailure">
            whether to throw exception when From key is missing from inputs. If false, value will be set to 0
        </member>
        <member name="M:TTRPG.Engine.Mappings.Mapping.Apply(System.String,System.Collections.Generic.Dictionary{System.String,System.String}@,System.Collections.Generic.IEnumerable{TTRPG.Engine.Role})">
            Injects the specified mapping into <param name="inputs"/> from the configured source determined by <see cref="P:TTRPG.Engine.Mappings.Mapping.MappingType"/>
            <param name="itemName">The sequence item name mapping is being applied for. If the mapping does not apply to that item nothing will happen.</param>
            <param name="roles">All roles available to the sequence.</param>
        </member>
        <member name="T:TTRPG.Engine.Mappings.MappingType">
            specifies type of mapping
        </member>
        <member name="F:TTRPG.Engine.Mappings.MappingType.Input">
            item is mapped from the input collection
        </member>
        <member name="F:TTRPG.Engine.Mappings.MappingType.Role">
            item is mapped from a role
        </member>
        <member name="M:TTRPG.Engine.SequenceItems.ISequenceItem.GetResult(System.Int32,TTRPG.Engine.Equations.IEquationResolver,System.Collections.Generic.Dictionary{System.String,System.String}@,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            	Process equation and get result.
            </summary>
            <param name="order">Order of this item in sequence</param>
            <param name="equationResolver"></param>
            <param name="sharedInputs">Global shared inputs; may be modified to pass data to downstream items</param>
            <param name="mappedInputs">Inputs mapped for this specific item</param>
            <returns></returns>
        </member>
        <member name="T:TTRPG.Engine.SequenceItems.SequenceItem">
            <summary>
            	The result is loaded into inputs to be made available to following equations
            </summary>
        </member>
        <member name="T:TTRPG.Engine.SequenceItems.SequenceItemResult">
            <summary>
            	Result for one resolved SequenceItem
            </summary>
        </member>
        <member name="P:TTRPG.Engine.SequenceItems.SequenceItemResult.Order">
            <summary>
            	The order of the processed sequence item in sequence, considered as if all items were processed
            </summary>
        </member>
        <member name="P:TTRPG.Engine.SequenceItems.SequenceItemResult.Inputs">
            <summary>
            	Snapshot of inputs used by this item (may vary from later items)
            </summary>
        </member>
        <member name="P:TTRPG.Engine.SequenceItems.SequenceItemResult.ResolvedItem">
            <summary>
            	The item that was rolled
            </summary>
        </member>
        <member name="P:TTRPG.Engine.SequenceItems.SequenceItemResult.Result">
            <summary>
            	What item resolved to
            </summary>
        </member>
        <member name="T:TTRPG.Engine.SequenceItems.SequenceItemType">
            <summary>
            	Identifies the type of sequence item
            </summary>
        </member>
        <member name="F:TTRPG.Engine.SequenceItems.SequenceItemType.Algorithm">
            <summary>
            	Equation will be processed as an algorithm
            </summary>
        </member>
        <member name="F:TTRPG.Engine.SequenceItems.SequenceItemType.Message">
            <summary>
            	Equation will be processed as a message
            </summary>
        </member>
        <member name="M:TTRPG.Engine.Sequences.Sequence.Check(TTRPG.Engine.Equations.IEquationResolver,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.IEnumerable{TTRPG.Engine.Role})">
            <summary>
            	Check if sequence can be executed with the provided parameters
            </summary>
            <param name="equationResolver"></param>
            <param name="inputs"></param>
            <param name="roles"></param>
            <returns></returns>
        </member>
        <member name="M:TTRPG.Engine.Sequences.Sequence.Process(TTRPG.Engine.Equations.IEquationResolver,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.IEnumerable{TTRPG.Engine.Role})">
            <summary>
            	Process sequence items and get result
            </summary>
            <param name="equationResolver"></param>
            <param name="inputs"></param>
            <param name="roles"></param>
            <returns></returns>
        </member>
    </members>
</doc>
