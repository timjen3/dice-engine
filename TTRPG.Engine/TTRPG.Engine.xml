<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TTRPG.Engine</name>
    </assembly>
    <members>
        <member name="P:TTRPG.Engine.CommandParsing.Parsers.ICommandParser.IsDefault">
            <summary>
            	Returns true if this processor will be used when no other processors apply
            	The result of CanProcess() method does not matter when this is true
            </summary>
        </member>
        <member name="M:TTRPG.Engine.CommandParsing.Parsers.ICommandParser.CanProcess(System.String)">
            <summary>
            	Returns true if this parser handles the given type of command
            </summary>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:TTRPG.Engine.CommandParsing.Parsers.ICommandParser.GetProcessor(TTRPG.Engine.EngineCommand)">
            <summary>
            	Returns a command processor for the command
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:TTRPG.Engine.CommandParsing.Parsers.ICommandParser.GetExampleCommands">
            <summary>
            	Returns example commands for related command handlers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TTRPG.Engine.CommandParsing.Processors.ITTRPGCommandProcessor.Process">
            processes command and returns messages
        </member>
        <member name="T:TTRPG.Engine.Condition">
            Condition on Sequence or SequenceItem
        </member>
        <member name="M:TTRPG.Engine.Condition.#ctor">
            constructor for condition
        </member>
        <member name="M:TTRPG.Engine.Condition.#ctor(System.String)">
            constructor for sequence-level condition
        </member>
        <member name="M:TTRPG.Engine.Condition.#ctor(System.String,System.String,System.String,System.Boolean,System.String)">
            constructor for condition for 1 item
        </member>
        <member name="M:TTRPG.Engine.Condition.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Boolean,System.String)">
            condition for 1+ items
        </member>
        <member name="P:TTRPG.Engine.Condition.DependentOnItem">
            Condition requires that this item was not skipped
        </member>
        <member name="P:TTRPG.Engine.Condition.Equation">
            Equation to evaluate; >= 1 is true otherwise false
        </member>
        <member name="P:TTRPG.Engine.Condition.ItemNames">
            Name of sequence item to bind to
        </member>
        <member name="P:TTRPG.Engine.Condition.ThrowOnFail">
            Whether exception should be thrown when Check fails
        </member>
        <member name="P:TTRPG.Engine.Condition.FailureMessage">
            Custom message for failure if ThrowOnFail is true; if ThrowOnFail is false it will be added as a result
        </member>
        <member name="P:TTRPG.Engine.Engine.AutomaticCommand.Command">
            <summary>
            	Command to be executed
            </summary>
        </member>
        <member name="P:TTRPG.Engine.Engine.AutomaticCommand.EntityFilter">
            <summary>
            	Delegate for entities to be included
            </summary>
        </member>
        <member name="P:TTRPG.Engine.Engine.AutomaticCommand.AliasEntitiesAs">
            <summary>
            	How to alias included entities
            </summary>
        </member>
        <member name="P:TTRPG.Engine.Engine.AutomaticCommand.DefaultInputs">
            <summary>
            	Additional inputs to include
            </summary>
        </member>
        <member name="P:TTRPG.Engine.Engine.AutomaticCommandFactoryOptions.AutomaticCommands">
            <summary>
            	Commands to be ran automatically
            </summary>
        </member>
        <member name="M:TTRPG.Engine.Engine.IAutomaticCommandFactory.GetSequenceAutomaticCommands(TTRPG.Engine.CommandParsing.ProcessedCommand)">
            <summary>
            	Returns commands triggered by the processed command
            </summary>
            <param name="processed"></param>
            <returns></returns>
        </member>
        <member name="M:TTRPG.Engine.Engine.IAutomaticCommandFactory.GetAutomaticCommands(System.Collections.Generic.IEnumerable{TTRPG.Engine.Roles.Entity})">
            <summary>
            	Returns commands not triggered by sequences in particular
            </summary>
            <returns></returns>
        </member>
        <member name="P:TTRPG.Engine.Engine.SequenceAutoCommand.SequenceCategory">
            <summary>
            	Command fires for any sequences with this category
            </summary>
        </member>
        <member name="P:TTRPG.Engine.Engine.SequenceAutoCommand.CompletedOnly">
            <summary>
            	When true only fires for completed sequences
            </summary>
        </member>
        <member name="T:TTRPG.Engine.Equations.EquationResolver">
            Resolves an equation using jace
        </member>
        <member name="M:TTRPG.Engine.Equations.EquationResolver.#ctor(Jace.CalculationEngine)">
            Constructor for Equation Resolver
        </member>
        <member name="M:TTRPG.Engine.Equations.EquationResolver.Process(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            adds inputs as arguments and resolves equation with jace.net
        </member>
        <member name="T:TTRPG.Engine.Equations.EquationService">
            contains logic for sequence components
        </member>
        <member name="M:TTRPG.Engine.Equations.EquationService.GetSourceMappingData(TTRPG.Engine.Mapping,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.IEnumerable{TTRPG.Engine.Roles.Entity})">
            Returns source data depending on MappingType
        </member>
        <member name="M:TTRPG.Engine.Equations.EquationService.CheckEntityConditions(TTRPG.Engine.Sequences.Sequence,System.Collections.Generic.IEnumerable{TTRPG.Engine.Roles.Entity})">
            Checks entity conditions against provided entities
        </member>
        <member name="M:TTRPG.Engine.Equations.EquationService.#ctor(TTRPG.Engine.Equations.IEquationResolver)">
            EquationService Constructor
        </member>
        <member name="M:TTRPG.Engine.Equations.EquationService.Check(TTRPG.Engine.Condition,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.HashSet{System.String}@)">
            Determine if the condition passes for the sequence
        </member>
        <member name="M:TTRPG.Engine.Equations.EquationService.Check(TTRPG.Engine.Condition,System.String,System.Collections.Generic.IDictionary{System.String,System.String},TTRPG.Engine.Sequences.SequenceResult,System.Collections.Generic.HashSet{System.String}@)">
            Determine if the condition passes for a sequence item
        </member>
        <member name="M:TTRPG.Engine.Equations.EquationService.Apply(TTRPG.Engine.Mapping,System.String,System.Collections.Generic.Dictionary{System.String,System.String}@,System.Collections.Generic.IEnumerable{TTRPG.Engine.Roles.Entity})">
            Injects the specified mapping into <param name="inputs"/> from the configured source determined by <see cref="T:TTRPG.Engine.MappingType"/>
            <param name="itemName">The sequence item name mapping is being applied for. If the mapping does not apply to that item nothing will happen.</param>
            <param name="entities">All entities available to the sequence.</param>
        </member>
        <member name="M:TTRPG.Engine.Equations.EquationService.GetResult(TTRPG.Engine.SequenceItems.SequenceItem,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String}@,System.Collections.Generic.IDictionary{System.String,System.String})">
            Process a sequence item and get the result
        </member>
        <member name="M:TTRPG.Engine.Equations.EquationService.ProcessResults(System.Collections.Generic.IEnumerable{TTRPG.Engine.Engine.Events.EventConfig},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{TTRPG.Engine.Roles.Entity})">
            Process event config and set results
        </member>
        <member name="M:TTRPG.Engine.Equations.EquationService.Process(TTRPG.Engine.SequenceItems.SequenceItem,TTRPG.Engine.Roles.Entity,System.Collections.Generic.IDictionary{System.String,System.String})">
            <see cref="M:TTRPG.Engine.Equations.IEquationService.Process(TTRPG.Engine.SequenceItems.SequenceItem,TTRPG.Engine.Roles.Entity,System.Collections.Generic.IDictionary{System.String,System.String})"/>
        </member>
        <member name="M:TTRPG.Engine.Equations.EquationService.Check(TTRPG.Engine.Sequences.Sequence,TTRPG.Engine.Roles.Entity,System.Collections.Generic.IDictionary{System.String,System.String})">
            <see cref="M:TTRPG.Engine.Equations.IEquationService.Check(TTRPG.Engine.Sequences.Sequence,TTRPG.Engine.Roles.Entity,System.Collections.Generic.IDictionary{System.String,System.String})"/>
        </member>
        <member name="M:TTRPG.Engine.Equations.EquationService.Check(TTRPG.Engine.Sequences.Sequence,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{TTRPG.Engine.Roles.Entity})">
            <see cref="M:TTRPG.Engine.Equations.IEquationService.Check(TTRPG.Engine.Sequences.Sequence,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{TTRPG.Engine.Roles.Entity})"/>
        </member>
        <member name="M:TTRPG.Engine.Equations.EquationService.Process(TTRPG.Engine.Sequences.Sequence,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{TTRPG.Engine.Roles.Entity})">
            <see cref="M:TTRPG.Engine.Equations.IEquationService.Process(TTRPG.Engine.Sequences.Sequence,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{TTRPG.Engine.Roles.Entity})"/>
        </member>
        <member name="T:TTRPG.Engine.Equations.IEquationResolver">
            <summary>
            	Resolves equations
            </summary>
        </member>
        <member name="M:TTRPG.Engine.Equations.IEquationResolver.Process(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            	Resolves a mathematical expression using provided inputs
            </summary>
            <param name="equation"></param>
            <param name="inputs">Arguments to inject into the equation</param>
            <returns></returns>
        </member>
        <member name="T:TTRPG.Engine.Equations.IEquationService">
            <summary>
            	Processes Sequences.
            </summary>
        </member>
        <member name="M:TTRPG.Engine.Equations.IEquationService.Check(TTRPG.Engine.Sequences.Sequence,TTRPG.Engine.Roles.Entity,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            	Check if a sequence can be resolved with the given arguments for the specified entity.
            </summary>
            <remarks>
            	Sequence Conditions are used for validation.
            </remarks>
            <param name="sequence"></param>
            <param name="entity"></param>
            <param name="inputs"></param>
            <returns></returns>
        </member>
        <member name="M:TTRPG.Engine.Equations.IEquationService.Check(TTRPG.Engine.Sequences.Sequence,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{TTRPG.Engine.Roles.Entity})">
            <summary>
            	Check if a Sequence can be processed with the given arguments.
            </summary>
            <remarks>
            	Sequence Conditions are used for validation.
            </remarks>
            <param name="sequence"></param>
            <param name="inputs"></param>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:TTRPG.Engine.Equations.IEquationService.Process(TTRPG.Engine.SequenceItems.SequenceItem,TTRPG.Engine.Roles.Entity,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            	Process a single sequence item and get the result
            </summary>
            <param name="item">item to be processed</param>
            <param name="entity">(optional) inject entity's attributes</param>
            <param name="inputs">(optional) inject</param>
            <returns></returns>
        </member>
        <member name="M:TTRPG.Engine.Equations.IEquationService.Process(TTRPG.Engine.Sequences.Sequence,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{TTRPG.Engine.Roles.Entity})">
            <summary>
            	Process a Sequence and get a SequenceResult.
            </summary>
            <param name="sequence"></param>
            <param name="inputs"></param>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:TTRPG.Engine.GameObject.Bury(System.String)">
            <summary>
            	Remove specified entity from game
            </summary>
            <param name="entityName"></param>
        </member>
        <member name="T:TTRPG.Engine.IInventoryService">
            <summary>
            	Manages inventory for entities
            </summary>
        </member>
        <member name="M:TTRPG.Engine.IInventoryService.DropItem(TTRPG.Engine.Roles.Entity,System.String)">
            <summary>
            	Remove item from bag
            </summary>
            <param name="entity"></param>
            <param name="itemName"></param>
        </member>
        <member name="M:TTRPG.Engine.IInventoryService.PickupItem(TTRPG.Engine.Roles.Entity,TTRPG.Engine.Roles.Entity)">
            <summary>
            	Adds item to bag
            </summary>
            <param name="entity"></param>
            <param name="item"></param>
        </member>
        <member name="M:TTRPG.Engine.IInventoryService.Equip(TTRPG.Engine.Roles.Entity,System.String,System.String)">
            <summary>
            	Equip inventory item from bag
            </summary>
            <param name="entity"></param>
            <param name="itemName"></param>
            <param name="equipAs"></param>
        </member>
        <member name="M:TTRPG.Engine.IInventoryService.Unequip(TTRPG.Engine.Roles.Entity,System.String)">
            <summary>
            	Unequip inventory item and put in bag
            </summary>
            <param name="entity"></param>
            <param name="itemName"></param>
        </member>
        <member name="M:TTRPG.Engine.InventoryService.Equip(TTRPG.Engine.Roles.Entity,System.String,System.String)">
            <see cref="M:TTRPG.Engine.IInventoryService.Equip(TTRPG.Engine.Roles.Entity,System.String,System.String)"/>
        </member>
        <member name="M:TTRPG.Engine.InventoryService.Unequip(TTRPG.Engine.Roles.Entity,System.String)">
            <see cref="M:TTRPG.Engine.IInventoryService.Unequip(TTRPG.Engine.Roles.Entity,System.String)"/>
        </member>
        <member name="M:TTRPG.Engine.InventoryService.DropItem(TTRPG.Engine.Roles.Entity,System.String)">
            <see cref="M:TTRPG.Engine.IInventoryService.DropItem(TTRPG.Engine.Roles.Entity,System.String)"/>
        </member>
        <member name="M:TTRPG.Engine.InventoryService.PickupItem(TTRPG.Engine.Roles.Entity,TTRPG.Engine.Roles.Entity)">
            <see cref="M:TTRPG.Engine.IInventoryService.PickupItem(TTRPG.Engine.Roles.Entity,TTRPG.Engine.Roles.Entity)"/>
        </member>
        <member name="T:TTRPG.Engine.IServiceCollectionExtensions">
            <summary>
            	Add TTRPG.Engine services to an IServiceCollection.
            </summary>
        </member>
        <member name="M:TTRPG.Engine.IServiceCollectionExtensions.AddTTRPGEngineServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            	Adds required services for ttrpg engine
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:TTRPG.Engine.IServiceCollectionExtensions.AddTTRPGEngineDataLayer(Microsoft.Extensions.DependencyInjection.IServiceCollection,TTRPG.Engine.Data.TTRPGEngineDataOptions)">
            <summary>
            	Adds data layer to services
            </summary>
            <param name="services"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:TTRPG.Engine.Mapping">
            <summary>
            	Renames input variables according to mappings before using them in conditions or sequence item equations.
            	The inputs are always copied to a new dictionary before changes are made to isolate changes to equations and reduce side effects.
            </summary>
        </member>
        <member name="M:TTRPG.Engine.Mapping.#ctor">
            Parameterless constructor
        </member>
        <member name="M:TTRPG.Engine.Mapping.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
            Constructor for an Entity Mapping
        </member>
        <member name="M:TTRPG.Engine.Mapping.#ctor(System.String,System.String,System.String,System.Boolean)">
            Constructor for an Input Mapping
        </member>
        <member name="M:TTRPG.Engine.Mapping.#ctor(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            Constructor for an InventoryItem Mapping
        </member>
        <member name="P:TTRPG.Engine.Mapping.From">
            source property key
        </member>
        <member name="P:TTRPG.Engine.Mapping.To">
            destination property key
        </member>
        <member name="P:TTRPG.Engine.Mapping.ItemName">
            sequence item to apply mapping to
        </member>
        <member name="P:TTRPG.Engine.Mapping.EntityName">
            entity to pull properties from
        </member>
        <member name="P:TTRPG.Engine.Mapping.InventoryItemName">
            inventory item to pull properties from
        </member>
        <member name="P:TTRPG.Engine.Mapping.MappingType">
            type of mapping
        </member>
        <member name="P:TTRPG.Engine.Mapping.ThrowOnFailure">
            whether to throw exception when From key is missing from inputs. If false, value will be set to 0
        </member>
        <member name="T:TTRPG.Engine.MappingType">
            specifies type of mapping
        </member>
        <member name="F:TTRPG.Engine.MappingType.Input">
            item is mapped from the input collection
        </member>
        <member name="F:TTRPG.Engine.MappingType.Entity">
            item is mapped from an entity
        </member>
        <member name="F:TTRPG.Engine.MappingType.InventoryItem">
            item is mapped from an inventory item
        </member>
        <member name="T:TTRPG.Engine.Roles.Attributes.DerivedAttributeDefinition">
            <summary>
            	The previous math parsing implementation supported injecting string variables
            	Inputs could look like this:
            		{"a": "1", "b": "rnd(1,2,3)"}
            	so equation: "a + b" would be resolved as "a + rnd(1,2,3)"
            	since jace doesn't support this, a tweak has been made where string inputs to be injected must have a key matching the regex: "^\[\[.+\]\]$"
            	Inputs must look like this:
            		{"a": "1", "[[b]]": "rnd(1,2,3)"}
            	and equation: "a + [[b]]" will be resolved as "a + rnd(1,2,3)"
            </summary>
        </member>
        <member name="T:TTRPG.Engine.Roles.Attributes.ReferenceAttributeDefinition">
            <summary>
            	Set after all other attributes.
            	Set to the value of the referenced attribute
            </summary>
        </member>
        <member name="T:TTRPG.Engine.Roles.Entity">
            an entity carries a set of attributes into equations
        </member>
        <member name="M:TTRPG.Engine.Roles.Entity.#ctor">
            entity parameterless constructor
        </member>
        <member name="M:TTRPG.Engine.Roles.Entity.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,TTRPG.Engine.Roles.Entity},System.Collections.Generic.List{TTRPG.Engine.Roles.Entity})">
            entity constructor
        </member>
        <member name="P:TTRPG.Engine.Roles.Entity.Name">
            entity's name
        </member>
        <member name="P:TTRPG.Engine.Roles.Entity.Attributes">
            entity's attributes
        </member>
        <member name="P:TTRPG.Engine.Roles.Entity.Categories">
            categories that entity belongs to
        </member>
        <member name="P:TTRPG.Engine.Roles.Entity.InventoryItems">
            inventory items
        </member>
        <member name="P:TTRPG.Engine.Roles.Entity.Bag">
            loose inventory items
        </member>
        <member name="P:TTRPG.Engine.Roles.Entity.Alias">
            on originals matches Name, on clones it differs
        </member>
        <member name="M:TTRPG.Engine.Roles.Entity.CloneAs(System.String)">
            creates a clone with a different name
        </member>
        <member name="M:TTRPG.Engine.Roles.Entity.RemoveAlias">
            Removes Alias
        </member>
        <member name="M:TTRPG.Engine.Roles.IRoleService.Birth(TTRPG.Engine.Roles.Role,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            	Create a new entity from a role
            </summary>
            <param name="role"></param>
            <param name="inputs"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:TTRPG.Engine.Roles.Role.Next(System.String)">
            Get next available name
        </member>
        <member name="T:TTRPG.Engine.SequenceItems.SequenceItem">
            <summary>
            	The result is loaded into inputs to be made available to following equations
            </summary>
        </member>
        <member name="T:TTRPG.Engine.SequenceItems.SequenceItemResult">
            <summary>
            	Result for one resolved SequenceItem
            </summary>
        </member>
        <member name="P:TTRPG.Engine.SequenceItems.SequenceItemResult.Order">
            <summary>
            	The order of the processed sequence item in sequence, considered as if all items were processed
            </summary>
        </member>
        <member name="P:TTRPG.Engine.SequenceItems.SequenceItemResult.Inputs">
            <summary>
            	Snapshot of inputs used by this item (may vary from later items)
            </summary>
        </member>
        <member name="P:TTRPG.Engine.SequenceItems.SequenceItemResult.ResolvedItem">
            <summary>
            	The item that was rolled
            </summary>
        </member>
        <member name="P:TTRPG.Engine.SequenceItems.SequenceItemResult.Result">
            <summary>
            	What item resolved to
            </summary>
        </member>
        <member name="T:TTRPG.Engine.TTRPGEngine">
            <summary>
            	Parses and processes commands
            </summary>
        </member>
        <member name="M:TTRPG.Engine.TTRPGEngine.InternalProcess(TTRPG.Engine.EngineCommand)">
            recursive; process a command and process any automatic commands triggered
        </member>
        <member name="M:TTRPG.Engine.TTRPGEngine.#ctor(TTRPG.Engine.CommandParsing.ICommandProcessorFactory,TTRPG.Engine.Engine.IAutomaticCommandFactory,TTRPG.Engine.Engine.Events.ITTRPGEventHandler)">
            <summary>
            	Create new instance of the TTRPGEngine
            </summary>
            <param name="factory"></param>
            <param name="autoCommandFactory"></param>
            <param name="eventHandler"></param>
        </member>
        <member name="M:TTRPG.Engine.TTRPGEngine.Process(System.String)">
            <summary>
            	Parse and process a command
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:TTRPG.Engine.TTRPGEngine.Process(TTRPG.Engine.EngineCommand)">
            <summary>
            	Parse and process a command
            </summary>
            <param name="command"></param>
        </member>
    </members>
</doc>
